---

- name: create a new firewall rule
  ansible.builtin.template:
    src: ova-http-upload.yml.j2
    dest: /etc/vmware/firewall/ova-http-upload.yml
  register: set_ova_http_upload_rule

- name: restart firewall service
  ansible.builtin.command: esxcli network firewall refresh
  when: set_ova_http_upload_rule is changed

- name: check to see if ovftool_installer_zip_file is defined
  fail:
    msg: "you need to specify the download location with ovftool_installer_zip_file variable"
  when: ovftool_installer_zip_file is undefined

- name: install ovftool
  ansible.builtin.unarchive:
    src: '{{ ovftool_installer_zip_file }}'
    dest: /tmp
    creates: /tmp/ovftool/ovftool
    remote_src: true
  delegate_to: localhost
  connection: local

- name: deploy appliance
  ansible.builtin.command: >
    {{ ovftool }}
    --acceptAllEulas
    --noSSLVerify
    --X:injectOvfEnv
    --allowExtraConfig
    --X:enableHiddenProperties
    --X:waitForIp
    --X:connectionFileTransferRetryCount=3
    --sourceType=OVA
    --powerOn
    --net:"Network 1"='{{ target_esx_portgroup }}'
    --datastore='{{ target_esx_datastore }}'
    --diskMode='{{ disk_mode }}'
    --deploymentOption="{{ vcenter_appliance_size }}"
    --prop:guestinfo.cis.appliance.root.shell=/bin/bash
    --prop:guestinfo.cis.deployment.autoconfig=True
    --prop:guestinfo.cis.silentinstall=False
    --prop:guestinfo.cis.vmdir.domain-name="{{ sso_domain_name }}"
    --prop:guestinfo.cis.vmdir.site-name="{{ sso_site_name }}"
    --prop:guestinfo.cis.vmdir.username="{{ vcenter_username }}"
    --prop:guestinfo.cis.vmdir.password="{{ sso_password }}"
    --prop:guestinfo.cis.appliance.net.addr.family="{{ net_addr_family }}"
    --prop:guestinfo.cis.appliance.root.passwd="{{ vcenter_password }}"
    --prop:guestinfo.cis.appliance.ssh.enabled="{{ ssh_enable }}"
    --prop:guestinfo.cis.vmdir.first-instance=True
    --prop:guestinfo.cis.ceip_enabled=True
    --prop:guestinfo.cis.appliance.ntp.servers='{% for item in ntp_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
    {% if network_ip_scheme == "DHCP" %}
    --prop:guestinfo.cis.appliance.net.mode="dhcp"
    {% elif network_ip_scheme == "static" %}
    --name='{{ vcenter_appliance_name }}'
    --prop:guestinfo.cis.appliance.net.pnid="{{ vcenter_fqdn }}"
    --prop:guestinfo.cis.appliance.net.mode="static"
    --prop:guestinfo.cis.appliance.net.addr="{{ vcenter_ip_address | ansible.utils.ipaddr }}"
    --prop:guestinfo.cis.appliance.net.prefix="{{ vcenter_net_prefix }}"
    --prop:guestinfo.cis.appliance.net.gateway="{{ vcenter_gateway | ansible.utils.ipaddr }}"
    --prop:guestinfo.cis.appliance.net.dns.servers='{% for item in dns_servers %}{{ item }}{{ "," if not loop.last else "" }}{% endfor %}'
    {% endif %}
    --pullUploadMode
    '{{ vcenter_ova_file }}'
    vi://"{{ ansible_user | default(ansible_ssh_user) | default('root') | urlencode }}":"{{ ansible_password | default(ansible_ssh_password) | urlencode }}"@{{ ansible_host }}/
  delegate_to: localhost
  connection: local
  vars:
    ovftool: /tmp/ovftool/ovftool